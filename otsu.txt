// code for otsu threshold on noisy image
	
   int M=ImageLength_FULL_IMAGE,N=ImageWidth_FULL_IMAGE,thresh;
   double p[256],mg,sig[256],maxx=0.0;
   for(int k=0; k<256;k++)
   {
    p[k]=0.0;
   }
    for(int k=0; k<256;k++)
	{
		for(int i=0; i<M;i++)
		{
			for(int j=0; j<N;j++)
			{
               if(fxy_FULL_IMAGE[i][j]==k)
               p[k]=p[k]+1;
			}
		}
		p[k]=p[k]/(M*N);
	}
    mg=0.0;
	for(int i=0; i<256;i++)
   {
     mg=mg+i*p[i];  
   }
	for(int k=1;k<255;k++)
	{
      double p1=0.0;
      double p2=0.0;
      double m1=0.0;
      double m2=0.0;
       for(int i=0;i<=k;i++)
	   {
            p1=p1+p[i];
            m1=m1+i*p[i];
	   }
        p2=1.0-p1;
        m1=m1/p1;
		for(int i=k+1;i<=255;i++)
	   {
            m2=m2+i*p[i];
	   }
		m2=m2/p2;
sig[k]=p1*(m1-mg)*(m1-mg)+p2*(m2-mg)*(m2-mg);
	}
	// finding maximum of between class variance

	for(int k=1;k<255;k++)
	{
		if(sig[k]>maxx)
			maxx=sig[k];
	}

	for(int k=1;k<255;k++)
	{
		if(sig[k]==maxx)
			thresh=k;// threshold
	}
// thresholding the image
-----------------------------------------------------------------------------------
